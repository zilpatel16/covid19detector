# -*- coding: utf-8 -*-
"""PBL3appfinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-oNDW8BShLB6sfcoaf_rxySfRD_FtzH5
"""



# Core Pkgs
import streamlit as st
st.set_page_config(page_title="Covid19 Detection Tool", page_icon="covid19.jpeg", layout='centered', initial_sidebar_state='auto')

import os
import time

# Viz Pkgs
import cv2 as cv
from PIL import Image,ImageEnhance
import numpy as np 

# AI Pkgs
import tensorflow as tf

def main():
	"""Simple Tool for Covid-19 Detection from Chest X-Ray"""
	html_templ = """
	<div style="background-color:blue;padding:10px;">
	<h1 style="color:yellow">Covid-19 Detection Tool</h1>
	</div>
	"""

	st.markdown(html_templ,unsafe_allow_html=True)
	st.write("A simple project for Covid-19 Diagnosis powered by Deep Learning and Streamlit")
	
	image_file = st.sidebar.file_uploader("Upload an X-Ray Image (jpg, png or jpeg)",type=['jpg','png','jpeg'])

	if image_file is not None:
		our_image = Image.open(image_file)

		if st.sidebar.button("Image Preview"):
			st.sidebar.image(our_image,width=300)

		activities = ["Image Enhancement","Diagnosis", "Disclaimer and Info"]
		choice = st.sidebar.selectbox("Select Activty",activities)

		if choice == 'Image Enhancement':
			st.subheader("Image Enhancement")

			enhance_type = st.sidebar.radio("Enhance Type",["Original","Contrast","Brightness"])

			if enhance_type == 'Contrast':
				c_rate = st.slider("Contrast",0.5,5.0)
				enhancer = ImageEnhance.Contrast(our_image)
				img_output = enhancer.enhance(c_rate)
				st.image(img_output,use_column_width=True)


			elif enhance_type == 'Brightness':
				c_rate = st.slider("Brightness",0.5,5.0)
				enhancer = ImageEnhance.Brightness(our_image)
				img_output = enhancer.enhance(c_rate)
				st.image(img_output,width=600,use_column_width=True)


			else:
				st.text("Original Image")
				st.image(our_image,width=600,use_column_width=True)


		elif choice == 'Diagnosis':
			
			if st.sidebar.button("Diagnosis"):

				# Image to Black and White
				new_img = np.array(our_image.convert('RGB')) #our image is binary we have to convert it in array
				new_img = cv.cvtColor(new_img,1) # 0 is original, 1 is grayscale
				gray = cv.cvtColor(new_img,cv.COLOR_BGR2GRAY)
				st.text("Chest X-Ray")
				st.image(gray,use_column_width=True)

				# PX-Ray (Image) Preprocessing
				IMG_SIZE = (200,200)
				img = cv.equalizeHist(gray)
				img = cv.resize(img,IMG_SIZE)
				img = img/255. #Normalization

				# Image reshaping according to Tensorflow format
				X_Ray = img.reshape(1,200,200,1)

				# Pre-Trained CNN Model Importing
				
				model = tf.keras.models.load_model('vgg_chest.h5')

				# Diagnosis (Prevision=Binary Classification)
				np.argmax(model.predict(X_Ray), axis=-1)
				diagnosis_proba = model.predict(X_Ray)
				probability_cov = diagnosis_proba*100
				probability_no_cov = (1-diagnosis_proba)*100

				my_bar = st.sidebar.progress(0)


				for percent_complete in range(100):
					time.sleep(0.05)
					my_bar.progress(percent_complete + 1)

				# Diagnosis Cases: No-Covid=0, Covid=1
				if diagnosis == 0:
					st.sidebar.success("DIAGNOSIS: NO COVID-19 (Probability: %.2f%%)" % (probability_no_cov))
				else:
					st.sidebar.error("DIAGNOSIS: COVID-19 (Probability: %.2f%%)" % (probability_cov))

				st.warning("This Web App is just a DEMO, the results are not 100% accurate.")


		

	if st.sidebar.button("About the Project"):
		st.sidebar.subheader("Covid-19 Detection Tool")
		st.sidebar.markdown("Submitted by Zil Patel(19070123140), Yash Mehta(19070123138), Hrithik Singh")
				                  
		
		st.sidebar.text("PBL - 3 WebApp developped using Python and Streamlit")


if __name__ == '__main__':
		main()

